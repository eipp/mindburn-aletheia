name: Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.0-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd infrastructure
          pnpm install

      - name: Deploy CDK Stack
        run: |
          cd infrastructure
          pnpm cdk deploy --require-approval never
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

  deploy-worker-interface:
    name: Deploy Worker Interface
    needs: [prepare, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/worker-interface
          pnpm install

      - name: Deploy Serverless
        run: |
          cd packages/worker-interface
          pnpm deploy:${{ github.event.inputs.environment || 'dev' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          VERSION: ${{ needs.prepare.outputs.version }}

  deploy-worker-webapp:
    name: Deploy Worker WebApp
    needs: [prepare, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd packages/worker-webapp
          pnpm install

      - name: Build
        run: |
          cd packages/worker-webapp
          pnpm build
        env:
          VITE_VERSION: ${{ needs.prepare.outputs.version }}

      - name: Deploy to S3
        run: |
          cd packages/worker-webapp
          pnpm deploy:${{ github.event.inputs.environment || 'dev' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  verify:
    name: Verify Deployment
    needs: [deploy-worker-interface, deploy-worker-webapp]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Health check Worker Interface
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.WORKER_INTERFACE_URL }}/health
          max-attempts: 3
          retry-delay: 5s

      - name: Health check Worker WebApp
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.WORKER_WEBAPP_URL }}
          max-attempts: 3
          retry-delay: 5s

  notify:
    name: Notify Deployment Status
    needs: [verify]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            Deployment Status: ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || 'dev' }}
            Version: ${{ needs.prepare.outputs.version }}
            
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 