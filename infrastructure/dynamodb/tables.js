"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMetricsTable = exports.createResultsTable = exports.createWorkersTable = exports.createTasksTable = void 0;
exports.createVerificationCacheTable = createVerificationCacheTable;
exports.createGoldenSetTable = createGoldenSetTable;
exports.createWorkerActivitiesTable = createWorkerActivitiesTable;
exports.createWorkerMetricsTable = createWorkerMetricsTable;
exports.createConsolidatedResultsTable = createConsolidatedResultsTable;
exports.createInsightsTable = createInsightsTable;
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const createTasksTable = (scope, id) => {
    return new aws_dynamodb_1.Table(scope, id, {
        tableName: 'Tasks',
        partitionKey: { name: 'taskId', type: aws_dynamodb_1.AttributeType.STRING },
        billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
        stream: aws_dynamodb_1.StreamViewType.NEW_AND_OLD_IMAGES,
        timeToLiveAttribute: 'expiresAt',
        // GSIs for efficient querying
        globalSecondaryIndexes: [
            {
                indexName: 'StatusIndex',
                partitionKey: { name: 'status', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'createdAt', type: aws_dynamodb_1.AttributeType.STRING },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
            {
                indexName: 'TypeIndex',
                partitionKey: { name: 'taskType', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'status', type: aws_dynamodb_1.AttributeType.STRING },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
        ],
    });
};
exports.createTasksTable = createTasksTable;
const createWorkersTable = (scope, id) => {
    return new aws_dynamodb_1.Table(scope, id, {
        tableName: 'Workers',
        partitionKey: { name: 'workerId', type: aws_dynamodb_1.AttributeType.STRING },
        billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
        globalSecondaryIndexes: [
            {
                indexName: 'StatusIndex',
                partitionKey: { name: 'status', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'lastActive', type: aws_dynamodb_1.AttributeType.STRING },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
            {
                indexName: 'TaskTypeIndex',
                partitionKey: { name: 'taskType', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'rating', type: aws_dynamodb_1.AttributeType.NUMBER },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
        ],
    });
};
exports.createWorkersTable = createWorkersTable;
const createResultsTable = (scope, id) => {
    return new aws_dynamodb_1.Table(scope, id, {
        tableName: 'Results',
        partitionKey: { name: 'taskId', type: aws_dynamodb_1.AttributeType.STRING },
        sortKey: { name: 'workerId', type: aws_dynamodb_1.AttributeType.STRING },
        billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
        globalSecondaryIndexes: [
            {
                indexName: 'WorkerIndex',
                partitionKey: { name: 'workerId', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'submittedAt', type: aws_dynamodb_1.AttributeType.STRING },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
        ],
    });
};
exports.createResultsTable = createResultsTable;
const createMetricsTable = (scope, id) => {
    return new aws_dynamodb_1.Table(scope, id, {
        tableName: 'WorkerMetrics',
        partitionKey: { name: 'workerId', type: aws_dynamodb_1.AttributeType.STRING },
        sortKey: { name: 'metricType', type: aws_dynamodb_1.AttributeType.STRING },
        billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
        globalSecondaryIndexes: [
            {
                indexName: 'MetricTypeIndex',
                partitionKey: { name: 'metricType', type: aws_dynamodb_1.AttributeType.STRING },
                sortKey: { name: 'value', type: aws_dynamodb_1.AttributeType.NUMBER },
                projectionType: aws_dynamodb_1.ProjectionType.ALL,
            },
        ],
    });
};
exports.createMetricsTable = createMetricsTable;
function createVerificationCacheTable(stack) {
    return new dynamodb.Table(stack, 'VerificationCache', {
        partitionKey: { name: 'hash', type: dynamodb.AttributeType.STRING },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        timeToLiveAttribute: 'ttl',
        removalPolicy: cdk.RemovalPolicy.DESTROY,
    }).addGlobalSecondaryIndex({
        indexName: 'SimilarityIndex',
        partitionKey: { name: 'similarityKey', type: dynamodb.AttributeType.STRING },
        projectionType: dynamodb.ProjectionType.ALL,
    });
}
function createGoldenSetTable(stack) {
    return new dynamodb.Table(stack, 'GoldenSet', {
        partitionKey: { name: 'taskId', type: dynamodb.AttributeType.STRING },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
    }).addGlobalSecondaryIndex({
        indexName: 'TaskTypeIndex',
        partitionKey: { name: 'taskType', type: dynamodb.AttributeType.STRING },
        projectionType: dynamodb.ProjectionType.ALL,
    });
}
function createWorkerActivitiesTable(stack) {
    return new dynamodb.Table(stack, 'WorkerActivities', {
        partitionKey: { name: 'workerId', type: dynamodb.AttributeType.STRING },
        sortKey: { name: 'timestamp', type: dynamodb.AttributeType.NUMBER },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
        timeToLiveAttribute: 'ttl',
    }).addGlobalSecondaryIndex({
        indexName: 'TaskTypeIndex',
        partitionKey: { name: 'taskType', type: dynamodb.AttributeType.STRING },
        sortKey: { name: 'timestamp', type: dynamodb.AttributeType.NUMBER },
        projectionType: dynamodb.ProjectionType.ALL,
    });
}
function createWorkerMetricsTable(stack) {
    return new dynamodb.Table(stack, 'WorkerMetrics', {
        partitionKey: { name: 'workerId', type: dynamodb.AttributeType.STRING },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
    })
        .addGlobalSecondaryIndex({
        indexName: 'ExpertiseIndex',
        partitionKey: { name: 'expertiseLevel', type: dynamodb.AttributeType.STRING },
        projectionType: dynamodb.ProjectionType.ALL,
    })
        .addGlobalSecondaryIndex({
        indexName: 'AccuracyIndex',
        partitionKey: { name: 'accuracyScore', type: dynamodb.AttributeType.NUMBER },
        projectionType: dynamodb.ProjectionType.ALL,
    });
}
function createConsolidatedResultsTable(stack) {
    return new dynamodb.Table(stack, 'ConsolidatedResults', {
        partitionKey: { name: 'taskId', type: dynamodb.AttributeType.STRING },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
    })
        .addGlobalSecondaryIndex({
        indexName: 'StrategyIndex',
        partitionKey: { name: 'strategy', type: dynamodb.AttributeType.STRING },
        sortKey: { name: 'timestamp', type: dynamodb.AttributeType.NUMBER },
        projectionType: dynamodb.ProjectionType.ALL,
    })
        .addGlobalSecondaryIndex({
        indexName: 'DecisionIndex',
        partitionKey: { name: 'finalDecision', type: dynamodb.AttributeType.STRING },
        sortKey: { name: 'confidence', type: dynamodb.AttributeType.NUMBER },
        projectionType: dynamodb.ProjectionType.ALL,
    });
}
function createInsightsTable(stack) {
    return new dynamodb.Table(stack, 'Insights', {
        partitionKey: {
            name: 'timestamp',
            type: dynamodb.AttributeType.STRING,
        },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
        timeToLiveAttribute: 'ttl',
        globalSecondaryIndexes: [
            {
                indexName: 'TypeIndex',
                partitionKey: {
                    name: 'insightType',
                    type: dynamodb.AttributeType.STRING,
                },
                sortKey: {
                    name: 'timestamp',
                    type: dynamodb.AttributeType.STRING,
                },
                projectionType: dynamodb.ProjectionType.ALL,
            },
        ],
    });
}
//# sourceMappingURL=data:application/json;base64,