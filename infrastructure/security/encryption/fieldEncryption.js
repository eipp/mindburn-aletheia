"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldEncryption = void 0;
const aws_sdk_1 = require("aws-sdk");
const crypto = require("crypto");
class FieldEncryption {
    constructor(keyId) {
        this.kms = new aws_sdk_1.KMS();
        this.keyId = keyId;
    }
    /**
     * Encrypts sensitive fields in an object using KMS and AES-256-GCM
     */
    async encryptFields(data, sensitiveFields) {
        const dataKey = await this.generateDataKey();
        const encryptedData = { ...data };
        for (const field of sensitiveFields) {
            if (field in data) {
                const encrypted = await this.encryptField(data[field], dataKey.Plaintext);
                encryptedData[field] = {
                    encrypted: encrypted.encryptedData,
                    iv: encrypted.iv.toString('base64'),
                    tag: encrypted.tag.toString('base64'),
                    encryptedKey: dataKey.CiphertextBlob.toString('base64'),
                };
            }
        }
        return encryptedData;
    }
    /**
     * Decrypts sensitive fields in an object using KMS and AES-256-GCM
     */
    async decryptFields(data, sensitiveFields) {
        const decryptedData = { ...data };
        for (const field of sensitiveFields) {
            if (field in data && typeof data[field] === 'object') {
                const encryptedField = data[field];
                const dataKey = await this.decryptDataKey(Buffer.from(encryptedField.encryptedKey, 'base64'));
                const decrypted = await this.decryptField(encryptedField.encrypted, dataKey, Buffer.from(encryptedField.iv, 'base64'), Buffer.from(encryptedField.tag, 'base64'));
                decryptedData[field] = decrypted;
            }
        }
        return decryptedData;
    }
    async generateDataKey() {
        return this.kms
            .generateDataKey({
            KeyId: this.keyId,
            KeySpec: 'AES_256',
        })
            .promise();
    }
    async decryptDataKey(encryptedKey) {
        const response = await this.kms
            .decrypt({
            CiphertextBlob: encryptedKey,
            KeyId: this.keyId,
        })
            .promise();
        return response.Plaintext;
    }
    async encryptField(data, key) {
        const iv = crypto.randomBytes(12);
        const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
        const encrypted = Buffer.concat([cipher.update(JSON.stringify(data), 'utf8'), cipher.final()]);
        return {
            encryptedData: encrypted.toString('base64'),
            iv,
            tag: cipher.getAuthTag(),
        };
    }
    async decryptField(encryptedData, key, iv, tag) {
        const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);
        decipher.setAuthTag(tag);
        const decrypted = Buffer.concat([
            decipher.update(Buffer.from(encryptedData, 'base64')),
            decipher.final(),
        ]);
        return JSON.parse(decrypted.toString('utf8'));
    }
}
exports.FieldEncryption = FieldEncryption;
//# sourceMappingURL=data:application/json;base64,