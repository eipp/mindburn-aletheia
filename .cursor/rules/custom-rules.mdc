---
description: 
globs: 
alwaysApply: true
---
# Mindburn Aletheia - Windsurf Rules

## Project Overview
Mindburn Aletheia is a human-in-the-loop AI verification platform that connects AI developers with skilled human workers through Telegram's ecosystem. The platform uses Telegram's Bot API, Mini Apps, and TON blockchain for micro-task distribution and payment.

## Technology Stack
- **Backend**: Node.js with Express, deployed as AWS Lambda functions
- **Frontend**: React for Mini Apps, Telegraf.js for Telegram Bot
- **Database**: AWS DynamoDB for task and user data
- **Messaging**: AWS SQS/SNS for task distribution
- **Blockchain**: TON for payments and transactions
- **Deployment**: Serverless Framework for AWS resources

## Architecture Guidelines
- Implement microservice architecture with five distinct components:
  - Worker Interface (Telegram Bot + Mini App)
  - Developer Platform (API + Dashboard)
  - Task Management System
  - Verification Engine
  - Payment System (TON Integration)
- Use serverless architecture for all components
- Maintain clear boundaries between components with well-defined APIs

## Code Style & Formatting
- Follow Airbnb Style Guide for JavaScript and React
- Use TypeScript for all components for type safety
- Use ESLint and Prettier for code formatting
- Write comprehensive unit tests with Jest
- Document all API endpoints using OpenAPI/Swagger

## Telegram Integration
- Follow Telegram Mini Apps best practices for UI/UX
- Implement TON Connect 2.0 for wallet integration
- Use the Telegram Bot API for conversational interfaces
- Leverage Mini Apps 2.0 features (full-screen mode, hardware awareness)
- Ensure Mobile-first design for all user interfaces

## TON Blockchain Integration
- Use TON-exclusive integration for all blockchain functionality
- Implement secure transaction handling with proper error recovery
- Follow TON Connect best practices for wallet interactions
- Use TON SDK for blockchain interactions
- Document all transaction types and flows

## AWS Best Practices
- Implement micro-VM isolation for Lambda functions
- Configure adaptive concurrency with ML-driven scaling
- Use optimal memory allocation for Lambda functions (1792MB sweet spot)
- Implement payload streaming for large verification datasets
- Use sparse GSIs and composite keys for DynamoDB query performance
- Configure automatic transitions between on-demand and provisioned capacity

## Security Guidelines
- Follow zero-trust security model
- Implement field-level encryption for sensitive data
- Use temporary credentials via AWS STS
- Apply least-privilege permissions for all Lambda functions
- Use KMS for encryption key management
- Implement forward-secure protocols for long-term data protection

## Development Workflow
- Use feature branches with pull requests
- Require code reviews for all changes
- Implement CI/CD pipeline with GitHub Actions
- Maintain comprehensive test coverage
- Document architectural decisions

## Project Structure
- Organize code by component, not by technology
- Co-locate related files (e.g., Lambda handler with its models)
- Keep configuration separate from code
- Use consistent naming conventions
- Store shared utilities in a common library

## Documentation Requirements
- Document all API endpoints with examples
- Create architectural diagrams for each component
- Document database schema and access patterns
- Provide setup instructions for local development
- Include deployment procedures

## Performance Targets
- API response time < 200ms (p95)
- Mini App load time < 1.5s
- Bot response time < 500ms
- Transaction validation time < 3s
- Verification task assignment < 1s

## Do Not Modify
- Core verification algorithms without extensive testing
- Payment system integration without security review
- Database schema without migration plan
- API contracts without version management

## Approved Libraries
- Telegraf.js for Telegram Bot development
- React for Mini App development
- TON Connect SDK for wallet integration
- AWS SDK for AWS resource management
- Jest for testing
- Serverless Framework for deployment
- OpenAPI for API documentation

## Local Development
- Use Docker for local environment consistency
- Mock AWS services with localstack
- Use ngrok for Telegram webhook testing
- Configure environment-specific settings via dotenv
- Run integration tests against isolated test environment